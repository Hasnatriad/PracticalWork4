from community import community_louvain
import random
import matplotlib.pyplot as plt
import networkx as nx
from collections import Counter
from operator import itemgetter
import timeit

def create_graph(n, p, q):
    graph = nx.Graph()
    for i in range(n):
        graph.add_node(i)
        for j in range(i):
            if i//100 == j//100:
                if random.random() < p:
                    graph.add_edge(i, j)
            else:
                if random.random() < q:
                    graph.add_edge(i, j)
                    
    for node, data in graph.nodes(True):
        data['label'] = node

    return graph


def label_propagation(graph):
    condition = True
    loop_count = 0
    while condition:
        condition = False

        loop_count += 1
        #print('loop', loop_count)
        
        labels = nx.get_node_attributes(graph,'label') # get labels of all nodes

        for node in graph.nodes():
            label_n = {}
            
            
            for neighbor in graph.neighbors(node):
                label_n[neighbor] = labels[neighbor] 
            
            #print(label_n)
            #print(type(label_n))
            """if len(label_n)==1:
                #print(graph.node[node]['label'])
                label_n = list(label_n)
                #print(label_n)
                graph.node[node]['label'] = label_n[0]
                #print(graph.node[node]['label'])
                condition = True
                
            else:"""
            
            common_labels = Counter(label_n.values()).most_common() 
            common_labels.sort(key=lambda x: x[1], reverse = True) 
            
            label_high_freq = max(common_labels, key=itemgetter(1))[1]  

            # if there is not only one label with maximum count then choose one randomly
            """if label_high_freq==1:
                a = random.choice(common_labels)
                label = a[0]
            else:"""
            i = 0
            a = [0 for x in range(len(common_labels))]
            for x0,x1 in common_labels:
                if label_high_freq == x1:
                    a[i] = x0
                    i += 1
            d = [x for x in a if x]
            #random.shuffle(d)
            #print(d)
            label = random.choice(d)
            #print(label)
            """for x0,x1 in common_labels:
            if label_high_freq == x1:
                a = x0
                break
            label = a"""

            if graph.node[node]['label'] != label:
                #print('node #', node)
                #print('current label: ',graph.node[node]['label'])
                #print('new label: ', label)
                graph.node[node]['label'] = label
                condition = True

        if loop_count>500:
            condition=False
 
    return graph
    
def edge_to_remove(G):
    x = nx.edge_betweenness_centrality(G)
    items = list(x.items())
    items.sort(key = lambda x:x[1], reverse = True)
    return items[0][0]


def girvan_algorithm(G):
    i = 0
    #c = list(nx.connected_component_subgraphs(G))
    #l = len(list(c))
    # print("The number of connected components are: ", l)
    i += 1

    x = nx.edge_betweenness_centrality(G)
    items = list(x.items())
    items.sort(key = lambda x:x[1], reverse = True)
    
    while items[0][1]>0.03:
        G.remove_edge(*items[0][0])
        c = list(nx.connected_component_subgraphs(G))
        #l = len(list(c))
        x = nx.edge_betweenness_centrality(G)
        items = list(x.items())
        items.sort(key = lambda x:x[1], reverse = True)
        i += 1

    print("Number of iterations taken by Girvan Newman Alogirithm to coverge is: ", i)
    
    return c


n = 400  # number of nodes
p = 0.31  # probability of connection within a cluster
q = 0.3  # probability of connection with different cluster
G = create_graph(n, p, q) # create graph

nx.draw(G)
plt.savefig("Q1 Graph.png")
plt.show()
